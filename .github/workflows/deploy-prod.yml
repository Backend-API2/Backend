name: Deploy to Production

on:
  push:
    branches: [prod]

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with complete cleanup
        working-directory: ./Backend
        run: mvn -B -DskipTests clean package -U

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Production
        run: |
          # Limpiar servidor
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            cd /home/ec2-user/app

            echo 'üßπ Cleaning up old containers, images and Maven artifacts...'
            docker-compose -p app-prod -f docker-compose.prod.yml down --remove-orphans || true
            docker rm -f $(docker ps -a -q --filter ancestor=app-prod-backend-prod) 2>/dev/null || true
            docker rmi -f app-prod-backend-prod 2>/dev/null || true
            docker container prune -f || true
            
            # Force kill any processes using port 8081/8082
            echo 'üßπ Cleaning up port conflicts...'
            sudo lsof -ti:8081 | xargs sudo kill -9 2>/dev/null || true
            sudo lsof -ti:8082 | xargs sudo kill -9 2>/dev/null || true
            echo '‚úÖ Port conflicts cleaned'
            
            # Clean up Maven artifacts
            echo 'üßπ Cleaning up Maven artifacts...'
            if [ -d 'Backend/target' ]; then
              rm -rf Backend/target
              echo '‚úÖ Maven target directory cleaned'
            fi
            
            # Clean up obsolete test files that reference removed refund classes
            echo 'üßπ Cleaning up obsolete refund test files...'
            rm -f Backend/src/test/java/backend_api/Backend/Controller/RefundControllerTest.java 2>/dev/null || true
            rm -f Backend/src/test/java/backend_api/Backend/DTO/refund/RefundResponseTest.java 2>/dev/null || true
            rm -f Backend/src/test/java/backend_api/Backend/Entity/RefundTest.java 2>/dev/null || true
            echo '‚úÖ Obsolete refund test files cleaned'
            
            # Clean up .class files
            find . -name '*.class' -type f -delete 2>/dev/null || true
            find . -name '*.jar.original' -type f -delete 2>/dev/null || true
            
            echo '‚úÖ Complete cleanup done!'

            # Crear directorios necesarios
            mkdir -p /home/appuser/app
          "

          # Copiar JAR compilado y docker-compose
          echo 'üì¶ Copying compiled JAR to server...'
          JAR_FILE=$(find ./Backend/target -name "Backend-*.jar" -type f | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå No JAR file found in Backend/target/"
            ls -la ./Backend/target/
            exit 1
          fi
          echo "üì¶ Found JAR file: $JAR_FILE"

          scp -o StrictHostKeyChecking=no -P ${{ secrets.EC2_PORT }} "$JAR_FILE" ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app/app.jar
          scp -o StrictHostKeyChecking=no -P ${{ secrets.EC2_PORT }} docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app/

          # Construir y levantar producci√≥n
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            cd /home/ec2-user/app
            
            # Verificar que el JAR est√° presente
            echo 'üîç Verifying JAR file...'
            if [ ! -f 'app.jar' ]; then
              echo '‚ùå app.jar not found!'
              exit 1
            fi
            
            echo '‚úÖ JAR file verified'
            echo 'üî® Building Docker image with compiled JAR...'
            docker-compose -p app-prod -f docker-compose.prod.yml build --no-cache --pull backend-prod
            
            echo 'üöÄ Starting production services...'
            docker-compose -p app-prod -f docker-compose.prod.yml up -d
            
            echo '‚úÖ Production deployed!'
            echo 'Backend: http://localhost:8081'
            echo 'Grafana: http://localhost:3001'
          "
