name: PR Quality Gate

on:
  pull_request:
    branches: [master]

env:
  JAVA_VERSION: '21'
  WORKDIR: Backend

jobs:
  quality-gate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Temurin Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with JaCoCo coverage..."
          mvn -B clean test jacoco:report

          echo "📊 Checking coverage threshold (minimum 75%)..."
          mvn -B jacoco:check

          echo "✅ Coverage check passed!"

      - name: Generate coverage summary
        id: coverage
        run: |
          if [ -f "target/site/jacoco/jacoco.csv" ]; then
            # Extract coverage percentage from CSV
            COVERAGE_LINE=$(grep "INSTRUCTION" target/site/jacoco/jacoco.csv)
            if [ -n "$COVERAGE_LINE" ]; then
              COVERED=$(echo $COVERAGE_LINE | cut -d',' -f4)
              MISSED=$(echo $COVERAGE_LINE | cut -d',' -f5)
              TOTAL=$((COVERED + MISSED))
              PERCENTAGE=$((COVERED * 100 / TOTAL))
              
              echo "coverage_percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
              echo "covered_instructions=$COVERED" >> $GITHUB_OUTPUT
              echo "total_instructions=$TOTAL" >> $GITHUB_OUTPUT
              
              echo "📊 Coverage: $PERCENTAGE% ($COVERED/$TOTAL instructions)"
            else
              echo "❌ Could not find coverage data"
              exit 1
            fi
          else
            echo "❌ Coverage report not found"
            exit 1
          fi

      - name: Comment coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = ${{ steps.coverage.outputs.coverage_percentage }};
            const covered = ${{ steps.coverage.outputs.covered_instructions }};
            const total = ${{ steps.coverage.outputs.total_instructions }};
            const threshold = 75;

            const status = coverage >= threshold ? '✅' : '❌';
            const message = coverage >= threshold ? 'meets' : 'does not meet';

            const comment = `## 📊 Code Coverage Report

            **Coverage: ${coverage}%** (${covered}/${total} instructions)

            ${status} Coverage ${message} the minimum threshold of ${threshold}%

            ### Coverage Details
            - **Instructions Covered**: ${covered}
            - **Total Instructions**: ${total}
            - **Coverage Percentage**: ${coverage}%
            - **Required Threshold**: ${threshold}%

            ${coverage < threshold ? '⚠️ **This PR will be blocked until coverage reaches the minimum threshold.**' : '🎉 **Coverage requirements satisfied!**'}

            <details>
            <summary>📋 View detailed coverage report</summary>

            The complete coverage report is available in the workflow artifacts.
            </details>`;

            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('📊 Code Coverage Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-pr-${{ github.event.number }}
          path: |
            ${{ env.WORKDIR }}/target/site/jacoco
            ${{ env.WORKDIR }}/target/jacoco.exec

      - name: Fail if coverage is below threshold
        if: steps.coverage.outputs.coverage_percentage < 75
        run: |
          echo "❌ Coverage is below the required threshold of 75%"
          echo "Current coverage: ${{ steps.coverage.outputs.coverage_percentage }}%"
          echo "Please add more tests to increase coverage before merging this PR."
          exit 1

      - name: Success message
        if: steps.coverage.outputs.coverage_percentage >= 75
        run: |
          echo "✅ Quality gate passed!"
          echo "Coverage: ${{ steps.coverage.outputs.coverage_percentage }}%"
          echo "This PR meets all quality requirements."
