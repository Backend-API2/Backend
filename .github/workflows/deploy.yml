name: Deploy Backend to EC2

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd Backend
          mvn clean test

      - name: Build application
        run: |
          cd Backend
          mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: Backend/target/Backend-*.jar

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifacts

      - name: List available files
        run: |
          echo "Current directory:"
          pwd
          echo "Files in current directory:"
          ls -la
          echo "Files in scripts directory:"
          ls -la scripts/ || echo "Scripts directory not found"

      - name: Setup EC2 directories
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Create app directory structure
            echo "Creating app directory structure..."
            mkdir -p /home/ubuntu/app/scripts

            # Copy scripts if they don't exist
            if [ ! -f /home/ubuntu/app/scripts/start.sh ]; then
              echo "Scripts not found, they will be copied in the next step"
            fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Stop current application
            if [ -f /home/ubuntu/app/app.pid ]; then
              echo "Stopping current application..."
              ./home/ubuntu/app/scripts/stop.sh || true
            fi

            # Backup current JAR if it exists
            if [ -f /home/ubuntu/app/Backend-*.jar ]; then
              echo "Backing up current JAR..."
              mv /home/ubuntu/app/Backend-*.jar /home/ubuntu/app/Backend-backup-$(date +%Y%m%d-%H%M%S).jar || true
            fi

            # Clean up old backups (keep only last 3)
            ls -t /home/ubuntu/app/Backend-backup-*.jar 2>/dev/null | tail -n +4 | xargs rm -f || true

      - name: Create scripts on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Create start.sh
            cat > /home/ubuntu/app/scripts/start.sh << 'EOF'
            #!/bin/bash
            APP_DIR="/home/ubuntu/app"
            JAR_FILE=$(find $APP_DIR -name "Backend-*.jar" -type f | head -1)
            PID_FILE="$APP_DIR/app.pid"
            LOG_FILE="$APP_DIR/app.log"
            
            if [ ! -f "$JAR_FILE" ]; then
                echo "‚ùå Error: No JAR file found in $APP_DIR"
                exit 1
            fi
            
            if [ -f "$PID_FILE" ]; then
                PID=$(cat "$PID_FILE")
                if ps -p $PID > /dev/null 2>&1; then
                    echo "‚ö†Ô∏è  Application is already running with PID $PID"
                    exit 1
                else
                    rm -f "$PID_FILE"
                fi
            fi
            
            echo "üöÄ Starting Backend application..."
            nohup java -jar -Dspring.profiles.active=prod "$JAR_FILE" > "$LOG_FILE" 2>&1 &
            APP_PID=$!
            echo $APP_PID > "$PID_FILE"
            
            sleep 5
            if ps -p $APP_PID > /dev/null 2>&1; then
                echo "‚úÖ Application started successfully with PID $APP_PID"
            else
                echo "‚ùå Failed to start application"
                rm -f "$PID_FILE"
                exit 1
            fi
            EOF
            
            # Create stop.sh
            cat > /home/ubuntu/app/scripts/stop.sh << 'EOF'
            #!/bin/bash
            APP_DIR="/home/ubuntu/app"
            PID_FILE="$APP_DIR/app.pid"
            
            if [ ! -f "$PID_FILE" ]; then
                echo "‚ö†Ô∏è  No PID file found. Application might not be running."
                exit 0
            fi
            
            PID=$(cat "$PID_FILE")
            if ! ps -p $PID > /dev/null 2>&1; then
                echo "‚ö†Ô∏è  Process with PID $PID is not running. Removing stale PID file."
                rm -f "$PID_FILE"
                exit 0
            fi
            
            echo "üõë Stopping Backend application (PID: $PID)..."
            kill -TERM $PID
            
            for i in {1..30}; do
                if ! ps -p $PID > /dev/null 2>&1; then
                    echo "‚úÖ Application stopped gracefully"
                    rm -f "$PID_FILE"
                    exit 0
                fi
                echo "‚è≥ Waiting for graceful shutdown... ($i/30)"
                sleep 1
            done
            
            echo "‚ö†Ô∏è  Graceful shutdown failed. Force killing..."
            kill -KILL $PID
            sleep 2
            if ! ps -p $PID > /dev/null 2>&1; then
                echo "‚úÖ Application force stopped"
                rm -f "$PID_FILE"
            else
                echo "‚ùå Failed to stop application"
                exit 1
            fi
            EOF
            
            # Create restart.sh
            cat > /home/ubuntu/app/scripts/restart.sh << 'EOF'
            #!/bin/bash
            echo "üîÑ Restarting Backend application..."
            ./stop.sh
            sleep 3
            ./start.sh
            EOF
            
            # Create status.sh
            cat > /home/ubuntu/app/scripts/status.sh << 'EOF'
            #!/bin/bash
            APP_DIR="/home/ubuntu/app"
            PID_FILE="$APP_DIR/app.pid"
            LOG_FILE="$APP_DIR/app.log"
            
            echo "üîç Backend Application Status"
            echo "=============================="
            
            if [ ! -f "$PID_FILE" ]; then
                echo "‚ùå Status: Not running (no PID file)"
                exit 1
            fi
            
            PID=$(cat "$PID_FILE")
            if ps -p $PID > /dev/null 2>&1; then
                echo "‚úÖ Status: Running (PID: $PID)"
                echo "üìä Process Info:"
                ps -p $PID -o pid,ppid,cmd,etime,pcpu,pmem
                
                if netstat -tlnp 2>/dev/null | grep -q ":$PID.*:8080"; then
                    echo "üåê Port 8080: Listening"
                else
                    echo "‚ö†Ô∏è  Port 8080: Not listening"
                fi
                
                echo "üè• Health Check:"
                if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
                    echo "‚úÖ Health: OK"
                else
                    echo "‚ùå Health: FAILED"
                fi
                
                echo ""
                echo "üìã Recent Logs (last 10 lines):"
                echo "--------------------------------"
                tail -10 "$LOG_FILE" 2>/dev/null || echo "No logs available"
            else
                echo "‚ùå Status: Not running (stale PID file)"
                rm -f "$PID_FILE"
                exit 1
            fi
            EOF
            
            # Make scripts executable
            chmod +x /home/ubuntu/app/scripts/*.sh
            echo "‚úÖ Scripts created and made executable"

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: 'artifacts/*.jar'
          target: '/home/ubuntu/app/'

      - name: Start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Make scripts executable
            chmod +x /home/ubuntu/app/scripts/*.sh

            # Start the application
            echo "Starting application..."
            ./home/ubuntu/app/scripts/start.sh

            # Wait a moment for the application to start
            sleep 10

            # Health check
            echo "Performing health check..."
            for i in {1..5}; do
              if curl -f http://localhost:8080/actuator/health; then
                echo "‚úÖ Application is healthy!"
                exit 0
              else
                echo "‚è≥ Waiting for application to start... (attempt $i/5)"
                sleep 10
              fi
            done

            echo "‚ùå Health check failed!"
            exit 1
