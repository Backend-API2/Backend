name: Deploy Backend to EC2

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: |
          cd Backend
          mvn clean test

      - name: Build application
        run: |
          cd Backend
          mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: Backend/target/Backend-*.jar

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./artifacts

      - name: List available files
        run: |
          echo "Current directory:"
          pwd
          echo "Files in current directory:"
          ls -la
          echo "Files in scripts directory:"
          ls -la scripts/ || echo "Scripts directory not found"

      - name: Setup SSH
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh

          # Add EC2 host to known_hosts
          ssh-keyscan -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          # Save private key
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Setup EC2 directories
        run: |
          # Create app directory structure
          echo "Creating app directory structure..."
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p /home/ec2-user/app/scripts"

          # Stop current application if running
          echo "üõë Stopping current application if running..."
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            echo 'üîç Checking for processes using port 8080...'
            
            # Method 1: Kill processes using port 8080
            PORT_PIDS=\$(lsof -ti:8080 2>/dev/null || echo '')
            if [ ! -z \"\$PORT_PIDS\" ]; then
              echo \"Found processes using port 8080: \$PORT_PIDS\"
              for PID in \$PORT_PIDS; do
                echo \"Killing process \$PID...\"
                kill -TERM \$PID 2>/dev/null || true
              done
              sleep 3
              for PID in \$PORT_PIDS; do
                if ps -p \$PID > /dev/null 2>&1; then
                  echo \"Force killing process \$PID...\"
                  kill -KILL \$PID 2>/dev/null || true
                fi
              done
            fi
            
            # Method 2: Kill all Java processes with Backend in the command
            echo 'üîç Killing all Java Backend processes...'
            pkill -f 'java.*Backend' || true
            sleep 2
            
            # Method 3: Kill all Java processes using port 8080
            echo 'üîç Killing all Java processes using port 8080...'
            for PID in \$(lsof -ti:8080 2>/dev/null || echo ''); do
              if ps -p \$PID -o comm= | grep -q java; then
                echo \"Killing Java process \$PID on port 8080...\"
                kill -KILL \$PID 2>/dev/null || true
              fi
            done
            
            # Method 4: Clean up PID file
            if [ -f /home/ec2-user/app/app.pid ]; then
              PID=\$(cat /home/ec2-user/app/app.pid)
              echo \"Cleaning up PID file with PID \$PID...\"
              kill -KILL \$PID 2>/dev/null || true
              rm -f /home/ec2-user/app/app.pid
            fi
            
            # Final verification
            sleep 3
            if lsof -ti:8080 >/dev/null 2>&1; then
              echo \"‚ö†Ô∏è  Port 8080 still in use after all attempts\"
              echo \"Processes using port 8080:\"
              lsof -i:8080 || true
              echo \"All Java processes:\"
              ps aux | grep java || true
            else
              echo \"‚úÖ Port 8080 is now free\"
            fi
          "

      - name: Create scripts on EC2
        run: |
          # Create start.sh
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cat > /home/ec2-user/app/scripts/start.sh << 'EOF'
          #!/bin/bash
          APP_DIR=\"/home/ec2-user/app\"
          JAR_FILE=\$(find \$APP_DIR -name \"Backend-*.jar\" -type f | head -1)
          PID_FILE=\"\$APP_DIR/app.pid\"
          LOG_FILE=\"\$APP_DIR/app.log\"

          if [ ! -f \"\$JAR_FILE\" ]; then
              echo \"‚ùå Error: No JAR file found in \$APP_DIR\"
              exit 1
          fi

          if [ -f \"\$PID_FILE\" ]; then
              PID=\$(cat \"\$PID_FILE\")
              if ps -p \$PID > /dev/null 2>&1; then
                  echo \"‚ö†Ô∏è  Application is already running with PID \$PID\"
                  exit 1
              else
                  rm -f \"\$PID_FILE\"
              fi
          fi

          echo \"üöÄ Starting Backend application...\"
          nohup java -jar -Dspring.profiles.active=prod \"\$JAR_FILE\" > \"\$LOG_FILE\" 2>&1 &
          APP_PID=\$!
          echo \$APP_PID > \"\$PID_FILE\"

          sleep 5
          if ps -p \$APP_PID > /dev/null 2>&1; then
              echo \"‚úÖ Application started successfully with PID \$APP_PID\"
          else
              echo \"‚ùå Failed to start application\"
              rm -f \"\$PID_FILE\"
              exit 1
          fi
          EOF"

          # Create stop.sh
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cat > /home/ec2-user/app/scripts/stop.sh << 'EOF'
          #!/bin/bash
          APP_DIR=\"/home/ec2-user/app\"
          PID_FILE=\"\$APP_DIR/app.pid\"

          if [ ! -f \"\$PID_FILE\" ]; then
              echo \"‚ö†Ô∏è  No PID file found. Application might not be running.\"
              exit 0
          fi

          PID=\$(cat \"\$PID_FILE\")
          if ! ps -p \$PID > /dev/null 2>&1; then
              echo \"‚ö†Ô∏è  Process with PID \$PID is not running. Removing stale PID file.\"
              rm -f \"\$PID_FILE\"
              exit 0
          fi

          echo \"üõë Stopping Backend application (PID: \$PID)...\"
          kill -TERM \$PID

          for i in {1..30}; do
              if ! ps -p \$PID > /dev/null 2>&1; then
                  echo \"‚úÖ Application stopped gracefully\"
                  rm -f \"\$PID_FILE\"
                  exit 0
              fi
              echo \"‚è≥ Waiting for graceful shutdown... (\$i/30)\"
              sleep 1
          done

          echo \"‚ö†Ô∏è  Graceful shutdown failed. Force killing...\"
          kill -KILL \$PID
          sleep 2
          if ! ps -p \$PID > /dev/null 2>&1; then
              echo \"‚úÖ Application force stopped\"
              rm -f \"\$PID_FILE\"
          else
              echo \"‚ùå Failed to stop application\"
              exit 1
          fi
          EOF"

          # Create restart.sh
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cat > /home/ec2-user/app/scripts/restart.sh << 'EOF'
          #!/bin/bash
          echo \"üîÑ Restarting Backend application...\"
          ./stop.sh
          sleep 3
          ./start.sh
          EOF"

          # Create status.sh
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "cat > /home/ec2-user/app/scripts/status.sh << 'EOF'
          #!/bin/bash
          APP_DIR=\"/home/ec2-user/app\"
          PID_FILE=\"\$APP_DIR/app.pid\"
          LOG_FILE=\"\$APP_DIR/app.log\"

          echo \"üîç Backend Application Status\"
          echo \"==============================\"

          if [ ! -f \"\$PID_FILE\" ]; then
              echo \"‚ùå Status: Not running (no PID file)\"
              exit 1
          fi

          PID=\$(cat \"\$PID_FILE\")
          if ps -p \$PID > /dev/null 2>&1; then
              echo \"‚úÖ Status: Running (PID: \$PID)\"
              echo \"üìä Process Info:\"
              ps -p \$PID -o pid,ppid,cmd,etime,pcpu,pmem
              
              if netstat -tlnp 2>/dev/null | grep -q \":\$PID.*:8080\"; then
                  echo \"üåê Port 8080: Listening\"
              else
                  echo \"‚ö†Ô∏è  Port 8080: Not listening\"
              fi
              
              echo \"üè• Health Check:\"
              if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
                  echo \"‚úÖ Health: OK\"
              else
                  echo \"‚ùå Health: FAILED\"
              fi
              
              echo \"\"
              echo \"üìã Recent Logs (last 10 lines):\"
              echo \"--------------------------------\"
              tail -10 \"\$LOG_FILE\" 2>/dev/null || echo \"No logs available\"
          else
              echo \"‚ùå Status: Not running (stale PID file)\"
              rm -f \"\$PID_FILE\"
              exit 1
          fi
          EOF"

          # Make scripts executable
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "chmod +x /home/ec2-user/app/scripts/*.sh"
          echo "‚úÖ Scripts created and made executable"

      - name: Copy JAR to EC2
        run: |
          # Find the JAR file
          JAR_FILE=$(find ./artifacts -name "*.jar" -type f | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå No JAR file found in artifacts directory"
            ls -la ./artifacts/
            exit 1
          fi

          echo "üì¶ Found JAR file: $JAR_FILE"

          # Copy JAR to EC2 using scp command
          scp -o StrictHostKeyChecking=no -P ${{ secrets.EC2_PORT }} "$JAR_FILE" ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app/

          if [ $? -eq 0 ]; then
            echo "‚úÖ JAR file copied successfully"
          else
            echo "‚ùå Failed to copy JAR file"
            exit 1
          fi

      - name: Start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Change to app directory
            cd /home/ec2-user/app

            # Make scripts executable
            chmod +x scripts/*.sh

            # List current JAR files
            echo "üì¶ Current JAR files:"
            ls -la *.jar

            # Start the application
            echo "üöÄ Starting application..."
            ./scripts/start.sh

            # Wait a moment for the application to start
            sleep 15

            # Check if application is running
            echo "üîç Checking application status..."
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if ps -p $PID > /dev/null 2>&1; then
                echo "‚úÖ Application is running with PID $PID"
              else
                echo "‚ùå Application failed to start"
                echo "üìã Recent logs:"
                tail -20 app.log
                exit 1
              fi
            else
              echo "‚ùå No PID file found"
              exit 1
            fi

            # Health check - try both endpoints
            echo "üè• Performing health check..."
            for i in {1..5}; do
              echo "Attempt $i/5..."
              
              # Try actuator health first
              if curl -f -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "‚úÖ Actuator health check passed!"
                break
              fi
              
              # Try custom health endpoint
              if curl -f -s http://localhost:8080/health > /dev/null 2>&1; then
                echo "‚úÖ Custom health check passed!"
                break
              fi
              
              echo "‚è≥ Waiting for application to start... (attempt $i/5)"
              sleep 10
            done

            # Final verification
            echo "üîç Final verification..."
            echo "Custom health endpoint response:"
            curl -s http://localhost:8080/health || echo "Failed to reach /health"
            echo ""
            echo "Actuator health endpoint response:"
            curl -s http://localhost:8080/actuator/health || echo "Failed to reach /actuator/health"
            echo ""

            echo "‚úÖ Deployment completed successfully!"
