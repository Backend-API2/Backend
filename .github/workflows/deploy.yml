name: Deploy to EC2

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        working-directory: ./Backend
        run: mvn clean compile -DskipTests -Dspring.profiles.active=test

      - name: Run tests
        working-directory: ./Backend
        run: mvn test -Dspring.profiles.active=test

      - name: Package application
        working-directory: ./Backend
        run: mvn package -DskipTests

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp Backend/target/Backend-*.jar deployment/
          cp -r Backend/scripts deployment/ || true

      - name: Deploy to EC2
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Crear directorio de deployment si no existe
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app

            # Detener aplicaci√≥n actual si est√° corriendo
            pkill -f "Backend-.*.jar" || true
            sleep 5

            # Limpiar archivos antiguos (mantener solo las √∫ltimas 3 versiones)
            ls -t Backend-*.jar 2>/dev/null | tail -n +4 | xargs rm -f || true

      - name: Copy JAR to EC2
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: 'deployment/Backend-*.jar'
          target: '/home/ubuntu/app'

      - name: Start application on EC2
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ubuntu/app

            # Configurar variables de entorno
            export SPRING_PROFILES_ACTIVE=prod
            export JAVA_OPTS="-Xmx512m -Xms256m -Dserver.port=8080"

            # Ejecutar aplicaci√≥n en background
            nohup java $JAVA_OPTS -jar Backend-*.jar > app.log 2>&1 &

            # Guardar PID para futuras referencias
            echo $! > app.pid

            # Esperar a que la aplicaci√≥n inicie
            sleep 30

            # Verificar que la aplicaci√≥n est√© funcionando
            if curl -f http://localhost:8080/actuator/health; then
              echo "‚úÖ Aplicaci√≥n desplegada exitosamente"
            else
              echo "‚ùå Error: La aplicaci√≥n no responde"
              echo "Logs de la aplicaci√≥n:"
              tail -50 app.log
              exit 1
            fi

            # Mostrar logs recientes
            echo "üìã Logs recientes:"
            tail -20 app.log
