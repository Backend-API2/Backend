name: Build and Deploy Backend

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build backend with Maven
        run: |
          cd Backend
          mvn clean package -DskipTests

          # Verificar que el JAR se gener√≥ correctamente
          echo "Verificando que el JAR se gener√≥:"
          ls -la target/
          if [ -f target/Backend-0.0.1-SNAPSHOT.jar ]; then
            echo "‚úì JAR generado correctamente"
            ls -la target/Backend-0.0.1-SNAPSHOT.jar
          else
            echo "‚úó ERROR: JAR no se gener√≥"
            echo "Contenido del directorio target:"
            ls -la target/
            exit 1
          fi

      - name: Test JAR execution
        run: |
          cd Backend
          echo "üß™ Testing JAR execution..."
          # Ejecutar el JAR en background (puerto 8080 por defecto)
          java -jar target/Backend-0.0.1-SNAPSHOT.jar &
          JAR_PID=$!

          # Esperar a que la aplicaci√≥n se inicie
          echo "Esperando a que la aplicaci√≥n se inicie..."
          sleep 20

          # Verificar que el proceso est√° corriendo
          if ps -p $JAR_PID > /dev/null; then
            echo "‚úÖ JAR ejecut√°ndose correctamente (PID: $JAR_PID)"
            
            # Probar health check
            echo "Probando health check..."
            if curl -f -s http://localhost:8080/api/health/check > /dev/null 2>&1; then
              echo "‚úÖ Health check exitoso en /api/health/check"
            elif curl -f -s http://localhost:8080/api/health/ping > /dev/null 2>&1; then
              echo "‚úÖ Health check exitoso en /api/health/ping"
            elif curl -f -s http://localhost:8080/api/health/info > /dev/null 2>&1; then
              echo "‚úÖ Health check exitoso en /api/health/info"
            else
              echo "‚ùå Health check failed"
              echo "Probando conectividad b√°sica..."
              if curl -f -s http://localhost:8080/ > /dev/null 2>&1; then
                echo "‚úÖ Backend responde en el puerto 8080"
              else
                echo "‚ùå Backend no responde en el puerto 8080"
                exit 1
              fi
            fi
            
            # Terminar el proceso
            echo "Terminando proceso de prueba..."
            kill $JAR_PID
            wait $JAR_PID 2>/dev/null
          else
            echo "‚ùå ERROR: JAR no se inici√≥ correctamente"
            exit 1
          fi

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.6
        with:
          host: 18.191.118.13
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: 'Backend/target/Backend-0.0.1-SNAPSHOT.jar'
          target: '/home/ec2-user/'
          strip_components: 2
          timeout: 60s
          command_timeout: 60s

      - name: Verify JAR was copied
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: 18.191.118.13
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Verificando que el JAR fue copiado correctamente:"
            echo "Contenido del directorio /home/ec2-user/:"
            ls -la /home/ec2-user/
            echo ""
            echo "Buscando archivos JAR:"
            find /home/ec2-user -name "*.jar" -type f
            echo ""

            # Verificar en la ubicaci√≥n esperada (con strip_components: 2)
            if [ -f /home/ec2-user/Backend-0.0.1-SNAPSHOT.jar ]; then
              echo "‚úì JAR file found successfully at expected location"
              ls -la /home/ec2-user/Backend-0.0.1-SNAPSHOT.jar
            # Verificar en la ubicaci√≥n alternativa (sin strip_components)
            elif [ -f /home/ec2-user/Backend/target/Backend-0.0.1-SNAPSHOT.jar ]; then
              echo "‚úì JAR file found at alternative location, moving to expected location"
              mv /home/ec2-user/Backend/target/Backend-0.0.1-SNAPSHOT.jar /home/ec2-user/Backend-0.0.1-SNAPSHOT.jar
              ls -la /home/ec2-user/Backend-0.0.1-SNAPSHOT.jar
            else
              echo "‚úó JAR file not found in any expected location"
              echo "ERROR: El archivo Backend-0.0.1-SNAPSHOT.jar no existe en el servidor"
              echo "Esto indica que el paso de copia (SCP) fall√≥"
              exit 1
            fi

      - name: Alternative copy with rsync (if SCP failed)
        if: failure()
        run: |
          echo "SCP fall√≥, intentando con rsync como alternativa..."
          # Instalar rsync si no est√° disponible
          sudo apt-get update && sudo apt-get install -y rsync

          # Crear la clave SSH temporal
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key

          # Copiar con rsync (usando --remove-source-files para simular strip_components)
          rsync -avz --remove-source-files -e "ssh -i /tmp/ec2_key -o StrictHostKeyChecking=no" \
            Backend/target/Backend-0.0.1-SNAPSHOT.jar \
            ec2-user@18.191.118.13:/home/ec2-user/

          echo "Verificando que rsync funcion√≥:"
          ssh -i /tmp/ec2_key -o StrictHostKeyChecking=no ec2-user@18.191.118.13 \
            "ls -la /home/ec2-user/Backend-0.0.1-SNAPSHOT.jar"

          # Limpiar la clave temporal
          rm -f /tmp/ec2_key

      - name: Restart backend on EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: 18.191.118.13
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user

            # Crear directorio deploy si no existe
            mkdir -p deploy

            # Parar procesos existentes (solo si existen)
            if pm2 list | grep -q "backend"; then
              echo "Parando proceso backend existente..."
              pm2 stop backend
              pm2 delete backend
            else
              echo "No hay proceso backend ejecut√°ndose, continuando..."
            fi

            # Mostrar contenido del directorio para debug
            echo "Contenido del directorio /home/ec2-user:"
            ls -la /home/ec2-user/

            # Verificar que el archivo JAR existe
            if [ ! -f Backend-0.0.1-SNAPSHOT.jar ]; then
              echo "ERROR: Backend-0.0.1-SNAPSHOT.jar no encontrado en /home/ec2-user/"
              echo "Buscando archivos JAR en el directorio:"
              find /home/ec2-user -name "*.jar" -type f
              exit 1
            fi

            # Limpiar archivos JAR antiguos (mantener solo el m√°s reciente)
            echo "Limpiando archivos JAR antiguos..."
            if [ -f backend.jar ]; then
              echo "Eliminando backend.jar anterior..."
              rm -f backend.jar
            fi

            # Mover el jar a la ubicaci√≥n final
            mv Backend-0.0.1-SNAPSHOT.jar backend.jar

            # Verificar que backend.jar exista
            if [ ! -f backend.jar ]; then
              echo "ERROR: backend.jar no encontrado despu√©s del move"
              exit 1
            fi

            echo "‚úÖ Archivo JAR actualizado correctamente"
            ls -la backend.jar

            # Iniciar con puerto 8080 (por defecto)
            pm2 start "java -jar backend.jar" --name backend

            # Verificar que el proceso se inici√≥ correctamente
            sleep 5
            echo "Estado de PM2 despu√©s del inicio:"
            pm2 status

            # Verificar que el proceso est√° realmente corriendo
            if pm2 list | grep -q "backend.*online"; then
              echo "‚úÖ Backend iniciado correctamente"
              echo "Puerto: 8080"
              echo "Estado: $(pm2 jlist | jq -r '.[] | select(.name=="backend") | .pm2_env.status')"
              
              # Verificar que el backend responde
              echo "üß™ Testing JAR execution..."
              sleep 15  # Dar tiempo suficiente para que la aplicaci√≥n se inicie completamente
              
              # Intentar health check con el endpoint correcto
              echo "Probando health check en puerto 8080..."
              if curl -f -s http://localhost:8080/api/health/check > /dev/null 2>&1; then
                echo "‚úÖ Health check exitoso en /api/health/check"
              elif curl -f -s http://localhost:8080/api/health/ping > /dev/null 2>&1; then
                echo "‚úÖ Health check exitoso en /api/health/ping"
              elif curl -f -s http://localhost:8080/api/health/info > /dev/null 2>&1; then
                echo "‚úÖ Health check exitoso en /api/health/info"
              else
                echo "‚ùå Health check failed"
                echo "Probando conectividad b√°sica..."
                if curl -f -s http://localhost:8080/ > /dev/null 2>&1; then
                  echo "‚úÖ Backend responde en el puerto 8080 pero sin endpoints de health"
                else
                  echo "‚ùå Backend no responde en el puerto 8080"
                  echo "Logs del proceso:"
                  pm2 logs backend --lines 30
                  exit 1
                fi
              fi
            else
              echo "‚ùå ERROR: Backend no se inici√≥ correctamente"
              echo "Logs del proceso:"
              pm2 logs backend --lines 20
              exit 1
            fi
