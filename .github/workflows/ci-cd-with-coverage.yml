name: 🚀 CI/CD Pipeline with Code Coverage

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]

jobs:
  # 🧪 Job de Testing con Coverage (siempre se ejecuta)
  test-with-coverage:
    name: 🧪 Test & Coverage Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para cobertura histórica

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: 🧪 Run Tests with Coverage
        run: |
          cd Backend
          mvn clean test jacoco:report
        env:
          MAVEN_OPTS: -Xmx1024m

      - name: 📊 Generate Coverage Report
        run: |
          cd Backend
          mvn jacoco:report

      - name: 📈 Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            Backend/target/site/jacoco/
            Backend/target/jacoco.exec
          retention-days: 30

      - name: 📋 Coverage Summary
        run: |
          cd Backend
          echo "📊 COVERAGE SUMMARY"
          echo "=================="
          if [ -f target/site/jacoco/index.html ]; then
            echo "✅ Coverage report generated successfully"
            echo "📁 Report location: target/site/jacoco/index.html"
          else
            echo "❌ Coverage report not found"
            exit 1
          fi

      - name: 🚨 Check Coverage Thresholds
        run: |
          cd Backend
          mvn jacoco:check
        continue-on-error: true

      - name: 📊 Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Leer el reporte de cobertura
              const reportPath = 'Backend/target/site/jacoco/jacoco.xml';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                // Extraer métricas básicas (simplificado)
                const instructionMatch = report.match(/type="INSTRUCTION".*missed="(\d+)".*covered="(\d+)"/);
                const branchMatch = report.match(/type="BRANCH".*missed="(\d+)".*covered="(\d+)"/);
                
                if (instructionMatch && branchMatch) {
                  const instructionMissed = parseInt(instructionMatch[1]);
                  const instructionCovered = parseInt(instructionMatch[2]);
                  const instructionTotal = instructionMissed + instructionCovered;
                  const instructionCoverage = ((instructionCovered / instructionTotal) * 100).toFixed(2);
                  
                  const branchMissed = parseInt(branchMatch[1]);
                  const branchCovered = parseInt(branchMatch[2]);
                  const branchTotal = branchMissed + branchCovered;
                  const branchCoverage = ((branchCovered / branchTotal) * 100).toFixed(2);
                  
                  const comment = `## 📊 Code Coverage Report
                  
                  | Metric | Coverage | Status |
                  |--------|----------|--------|
                  | **Instructions** | ${instructionCoverage}% | ${instructionCoverage >= 60 ? '✅' : '❌'} |
                  | **Branches** | ${branchCoverage}% | ${branchCoverage >= 50 ? '✅' : '❌'} |
                  
                  📁 **Detailed Report**: Available in artifacts
                  🎯 **Target**: Instructions ≥60%, Branches ≥50%
                  
                  ${instructionCoverage < 60 || branchCoverage < 50 ? '⚠️ **Coverage below threshold!** Please add more tests.' : '🎉 **Great coverage!** Keep it up!'}`;
                  
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: comment
                  });
                }
              }
            } catch (error) {
              console.log('Could not generate coverage comment:', error.message);
            }

      - name: 🏗️ Build Application
        run: |
          cd Backend
          mvn clean package -DskipTests

      - name: 📦 Upload JAR Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: Backend/target/*.jar
          retention-days: 7

  # 🚀 Job de Deployment (solo en push a master)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: test-with-coverage
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download JAR
        uses: actions/download-artifact@v3
        with:
          name: backend-jar

      - name: 📊 Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports

      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment process..."

            # 🛑 Método 1: Script de Stop
            if [ -f /home/ec2-user/app/scripts/stop.sh ]; then
              echo "📋 Using stop script..."
              cd /home/ec2-user/app/scripts && ./stop.sh
            else
              echo "⚠️ Stop script not found, using alternative cleanup..."
            fi

            # 🛑 Método 2: Cleanup por Puerto
            echo "🔍 Cleaning up port 8080..."
            if command -v lsof >/dev/null 2>&1; then
              PIDS=$(lsof -ti:8080)
              if [ ! -z "$PIDS" ]; then
                echo "🛑 Killing processes on port 8080: $PIDS"
                echo $PIDS | xargs kill -TERM
                sleep 5
                echo $PIDS | xargs kill -KILL 2>/dev/null || true
              fi
            fi

            # 🛑 Método 3: Cleanup por Proceso Java
            echo "☕ Cleaning up Java Backend processes..."
            pkill -f 'java.*Backend' || true
            sleep 2

            # 🛑 Método 4: Cleanup de PID Files
            echo "📁 Cleaning up PID files..."
            rm -f /home/ec2-user/app/*.pid
            rm -f /home/ec2-user/app/scripts/*.pid

            # 🛑 Método 5: Cleanup Final
            echo "🧹 Final cleanup..."
            if command -v lsof >/dev/null 2>&1; then
              FINAL_PIDS=$(lsof -ti:8080)
              if [ ! -z "$FINAL_PIDS" ]; then
                echo "❌ Port 8080 still occupied by: $FINAL_PIDS"
                echo "🛑 Force killing remaining processes..."
                echo $FINAL_PIDS | xargs kill -KILL
                sleep 2
              fi
            fi

            # 📦 Copiar nuevo JAR
            echo "📦 Copying new JAR..."
            cp /tmp/Backend-*.jar /home/ec2-user/app/

            # 🚀 Iniciar aplicación
            echo "🚀 Starting application..."
            cd /home/ec2-user/app
            nohup java -jar -Dspring.profiles.active=prod Backend-*.jar > app.log 2>&1 &
            echo $! > app.pid

            # ⏳ Esperar inicio
            echo "⏳ Waiting for application to start..."
            sleep 30

            # 🏥 Health Check con Retry Logic
            echo "🏥 Performing health checks..."
            MAX_ATTEMPTS=5
            ATTEMPT=1

            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "🔄 Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
              
              if curl -f http://localhost:8080/actuator/health >/dev/null 2>&1; then
                echo "✅ Actuator health check passed"
                break
              else
                echo "❌ Actuator health check failed"
                if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                  echo "💥 All health check attempts failed!"
                  exit 1
                fi
                sleep 10
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done

            # 🏥 Custom Health Check
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "🔄 Custom health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
              
              if curl -f http://localhost:8080/health >/dev/null 2>&1; then
                echo "✅ Custom health check passed"
                break
              else
                echo "❌ Custom health check failed"
                if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                  echo "💥 All custom health check attempts failed!"
                  exit 1
                fi
                sleep 10
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done

            # ✅ Verificación final
            echo "✅ Final verification..."
            curl -f http://localhost:8080/actuator/health
            curl -f http://localhost:8080/health

            echo "🎉 Deployment completed successfully!"
            echo "📊 Application is running and healthy"
            echo "🌐 Health endpoints verified"

  # 📊 Job de Coverage Summary (solo en master)
  coverage-summary:
    name: 📊 Coverage Summary
    runs-on: ubuntu-latest
    needs: test-with-coverage
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Download Coverage Reports
        uses: actions/download-artifact@v3
        with:
          name: coverage-reports

      - name: 📈 Publish Coverage to GitHub
        run: |
          echo "📊 Coverage reports available in artifacts"
          echo "📁 Location: Backend/target/site/jacoco/"
          echo "🎯 Coverage thresholds: Instructions ≥60%, Branches ≥50%"
